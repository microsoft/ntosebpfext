# Copyright (c) Microsoft Corporation
# SPDX-License-Identifier: MIT

# This workflow performs a build of the project and uploads the result as a build artifact.

name: Reusable MSBuild Workflow

on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
      # Name associated with the output of this build.
      build_artifact:
        required: true
        type: string
      # Additional options passed to msbuild.
      build_options:
        required: false
        type: string
      generate_release_package:
        required: false
        type: boolean
      build_codeql:
        required: false
        type: boolean
      build_msi:
        required: false
        type: boolean
      build_nuget:
        required: false
        type: boolean
      cxx_flags:
        required: false
        type: string
      ld_flags:
        required: false
        type: string
      configurations:
        required: false
        type: string
        default: '["Debug", "Release"]'

permissions:
  contents: read
  security-events: write # Required by codeql task

jobs:
  build:
    timeout-minutes: 90

    strategy:
      matrix:
        configurations: ${{ fromJSON(inputs.configurations) }}
    runs-on: windows-2022
    env:
      # Path to the solution file relative to the root of the project.
      SOLUTION_FILE_PATH: ntosebpfext.sln
      BUILD_ARTIFACT_NAME: ${{inputs.build_artifact}}
      BUILD_CONFIGURATION: ${{matrix.configurations}}
      BUILD_PLATFORM: x64
      BUILD_OPTIONS: ${{inputs.build_options}}
      CXX_FLAGS: ${{inputs.cxx_flags}}
      LD_FLAGS: ${{inputs.ld_flags}}

    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
      with:
        egress-policy: audit

    - id: skip_check
      uses: fkirc/skip-duplicate-actions@f75f66ce1886f00957d99748a42c724f4330bdcf # v5.3.1
      with:
        cancel_others: 'false'
        paths_ignore: '["**.md", "**/docs/**"]'

    - name: Set MSVC Environment Variables
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        powershell.exe "echo 'msvc_tools_path=%VCToolsInstallDir%' | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append"
        powershell.exe "echo 'msvc_tools_version=%VCToolsVersion%' | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append"
        powershell.exe "echo 'ASAN_WIN_CONTINUE_ON_INTERCEPTION_FAILURE=true' | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append"

    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      if: steps.skip_check.outputs.should_skip != 'true'
      with:
        repository: ${{github.repository}}
        submodules: 'recursive'
        ref: ${{inputs.ref}}

    - name: Configure Windows Error Reporting to make a local copy of any crashes that occur.
      id: configure_windows_error_reporting
      if: steps.skip_check.outputs.should_skip != 'true'
      run: |
        mkdir c:/dumps/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
        New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps" -ErrorAction SilentlyContinue
        New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps" -Name "DumpType" -Value 2 -PropertyType DWord -ErrorAction SilentlyContinue
        New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps" -Name "DumpFolder" -Value "c:\dumps\${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}}" -PropertyType ExpandString -ErrorAction SilentlyContinue

    - name: Initialize CodeQL
      if: inputs.build_codeql == true && steps.skip_check.outputs.should_skip != 'true'
      uses: github/codeql-action/init@b56ba49b26e50535fa1e7f7db0f4f7b4bf65d80d
      with:
        languages: 'cpp'

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@6fb02220983dee41ce7ae257b6f4d8f9bf5ed4ce
      with:
        msbuild-architecture: x64

    - name: Check clang version
      if: steps.skip_check.outputs.should_skip != 'true'
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        where clang.exe
        clang -v

    - name: Install .NET 8 SDK
      if: steps.skip_check.outputs.should_skip != 'true'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.x

    - name: Cache nuget packages
      if: steps.skip_check.outputs.should_skip != 'true'
      uses: actions/cache@0c907a75c2c80ebcb7f088228285e798b750cf8f
      env:
        cache-name: cache-nuget-modules
      with:
        path: packages
        key: ${{ runner.os }}-${{env.BUILD_PLATFORM}}-${{env.BUILD_CONFIGURATION}}-${{env.BUILD_ARTIFACT_NAME}}-${{ hashFiles('**/packages.config') }}-${{env.msvc_tools_version}}

    - name: Configuring repo for first build
      if: steps.skip_check.outputs.should_skip != 'true'
      working-directory: ${{env.GITHUB_WORKSPACE}}
      env:
        CXXFLAGS: /ZH:SHA_256 ${{env.CXX_FLAGS}}
        LDFLAGS: ${{env.LD_FLAGS}}
      run: |
        .\scripts\initialize_repo.ps1

    - name: NuGet Restore
      if: steps.skip_check.outputs.should_skip != 'true'
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: dotnet restore ${{env.SOLUTION_FILE_PATH}} /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=${{env.BUILD_PLATFORM}}

    - name: Build
      if: steps.skip_check.outputs.should_skip != 'true'
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=${{env.BUILD_PLATFORM}} /bl:${{env.BUILD_PLATFORM}}_${{env.BUILD_CONFIGURATION}}\build_logs\build.binlog ${{env.BUILD_OPTIONS}} ${{env.SOLUTION_FILE_PATH}}

    - name: Zip Build Output
      if: always() && (steps.skip_check.outputs.should_skip != 'true')
      working-directory: ${{github.workspace}}
      run: |
        Compress-Archive -Path ${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}} -DestinationPath .\build-${{ matrix.configurations }}.zip

    - name: Upload Build Output
      if: always() && (steps.skip_check.outputs.should_skip != 'true')
      uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1
      with:
        name: ${{inputs.build_artifact}}-${{matrix.configurations}}
        path: ${{github.workspace}}/build-${{ matrix.configurations }}.zip
        retention-days: 5

    - name: Build the NuGet package
      if: inputs.build_nuget == true && matrix.configurations == 'Release' && steps.skip_check.outputs.should_skip != 'true'
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=${{env.BUILD_PLATFORM}} /bl:${{env.BUILD_PLATFORM}}_${{env.BUILD_CONFIGURATION}}\build_logs\nuget_build.binlog ${{env.BUILD_OPTIONS}} tools\nuget\nuget.proj /t:Restore,Build,Pack

    - name: Upload the NuGet package
      if: inputs.build_nuget == true && matrix.configurations == 'Release' && steps.skip_check.outputs.should_skip != 'true'
      uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1
      with:
        name: ebpf-for-windows-extensions - NuGet package (${{inputs.build_artifact}}_${{env.BUILD_CONFIGURATION}})
        path: ${{github.workspace}}\${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}}\*.nupkg
        if-no-files-found: error
        retention-days: 5

    - name: Upload Build Logs
      if: always()
      uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1
      with:
        name: ${{inputs.build_artifact}} Build Logs-${{matrix.configurations}}
        path: ${{github.workspace}}\${{env.BUILD_PLATFORM}}_${{env.BUILD_CONFIGURATION}}\build_logs\*.binlog
        retention-days: 5

    - name: Check for crash dumps
      # Check for crash dumps even if the workflow failed.
      if: (success() || failure()) && (steps.skip_check.outputs.should_skip != 'true')
      uses: andstor/file-existence-action@076e0072799f4942c8bc574a82233e1e4d13e9d6
      id: check_dumps
      with:
        files: c:/dumps/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}/*.dmp

    - name: Upload any crash dumps
      # Upload crash dumps even if the workflow failed.
      if: (success() || failure()) && (steps.skip_check.outputs.should_skip != 'true') && (steps.check_dumps.outputs.files_exists == 'true')
      uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1
      id: upload_crash_dumps
      with:
        name: Crash-Dumps-${{env.NAME}}-${{env.BUILD_PLATFORM}}-${{env.BUILD_CONFIGURATION}}
        path: c:/dumps/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
        retention-days: 5

    - name: Perform CodeQL Analysis
      if: inputs.build_codeql == true && steps.skip_check.outputs.should_skip != 'true'
      uses: github/codeql-action/analyze@b56ba49b26e50535fa1e7f7db0f4f7b4bf65d80d
